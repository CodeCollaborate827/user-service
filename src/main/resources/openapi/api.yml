openapi: 3.0.0

info:
  title: Weather Service Microservice API
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local Server
tags:
  - name: user-service
    description: Operations related to user profile

paths:
  /user/profile:
    get:
      summary: Get user profile information
      operationId: getUserProfile
      tags:
      - user-service
      responses:
        '200':
          description: User profile information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
    put:
      summary: Update user profile information
      operationId: updateUserProfile
      tags:
      - user-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/profile/image:
    put:
      summary: Update user profile image
      operationId: updateUserProfileImage
      tags:
      - user-service
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The user's avatar image file to upload
      responses:
        '200':
          description: User profile image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/friends:
    get:
      summary: Get user's friend list
      operationId: getUserFriends
      tags:
        - user-service
      parameters:
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            format: int32
        - name: currentPage
          in: query
          description: Current page number
          required: false
          schema:
            type: integer
            default: 1
            format: int32
      responses:
        '200':
          description: User's friend list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendsListPagingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/friends/friend-requests:
    get:
      summary: Get user's friend requests
      operationId: getUserFriendRequests
      tags:
        - user-service
      parameters:
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            format: int32
        - name: currentPage
          in: query
          description: Current page number
          required: false
          schema:
            type: integer
            default: 1
            format: int32
      responses:
        '200':
          description: User's friend requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestListPagingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/friends/add-friend:
    post:
      summary: Send a friend request
      operationId: sendFriendRequest
      tags:
        - user-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFriendRequest'

      responses:
        '200':
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/friends/accept-friend-request:
    post:
      summary: Accept a friend request
      operationId: acceptFriendRequest
      tags:
        - user-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptFriendRequest'
      responses:
        '200':
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'
  /user/friends/deny-friend-request:
    post:
      summary: Deny a friend request
      operationId: denyFriendRequest
      tags:
        - user-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DenyFriendRequest'
      responses:
        '200':
          description: Friend request denied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalError'

components:
  schemas:
    UserProfileResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
        data:
          type: object
          properties:
            userId:
              type: string
              description: Unique identifier for the user
              example: "123456789"
            username:
              type: string
              description: Username chosen by the user
              example: "john_doe"
            displayName:
              type: string
              description: Full name of the user
              example: "John Doe"
            email:
              type: string
              description: Email address of the user
              example: "john.doe@example.com"
            avatarUrl:
              type: string
              description: URL to the user's avatar image
              example: "https://example.com/avatar.jpg"
            createdAt:
              type: string
              description: Timestamp of when the user profile was created
              example: "2024-07-12T09:02:48.597888600+07:00"
            updatedAt:
              type: string
              description: Timestamp of the last update to the user profile
              example: "2024-07-12T09:02:48.597888600+07:00"
            address:
              type: object
              description: User's address details
              properties:
                country:
                  type: string
                  description: Country where the user resides
                  example: "Vietnam"
                province:
                  type: string
                  description: Province where the user resides
                  example: "Hanoi"
                city:
                  type: string
                  description: City where the user resides
                  example: "Hanoi"
                district:
                  type: string
                  description: District where the user resides
                  example: "Cau Giay"
                ward:
                  type: string
                  description: Ward where the user resides
                  example: "Nghia Tan"
    FriendsListPagingResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
        data:
          type: object
          properties:
            totalItems:
              type: integer
              description: Total number of items in the full list
              example: 100
            pageSize:
              type: integer
              description: Number of items per page
              example: 5
            currentPage:
              type: integer
              description: Current page number
              example: 1
            totalPages:
              type: integer
              description: Total number of pages
              example: 20
            items:
              type: array
              description: List of friends on the current page
              items:
                $ref: '#/components/schemas/FriendDTO'
    FriendRequestListPagingResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
        data:
          type: object
          properties:
            totalItems:
              type: integer
              description: Total number of friend requests
              example: 50
            pageSize:
              type: integer
              description: Number of friend requests on the each page
              example: 5
            currentPage:
              type: integer
              description: Current page number
              example: 1
            totalPages:
              type: integer
              description: Total number of pages
              example: 10
            items:
              type: array
              description: List of friend requests on the current page
              items:
                $ref: '#/components/schemas/FriendRequestDTO'
    FriendRequestDTO:
      type: object
      properties:
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "1"
        senderId:
          type: string
          description: Unique identifier of the user sending the request
          example: "789012345"
        senderUsername:
          type: string
          description: Username of the user sending the request
          example: "john_doe"
        senderDisplayName:
          type: string
          description: Full name of the user sending the request
          example: "John Doe"
        senderAvatarUrl:
          type: string
          description: URL to the avatar image of the user sending the request
          example: "https://example.com/john_avatar.jpg"
        status:
          type: string
          description: Status of the request
          example: "PENDING"
        sentAt:
          type: string
          format: date-time
          description: Timestamp when the friend request was sent
          example: "2024-07-12T09:02:48.597888600+07:00"
    AddFriendRequest:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the friend request
          example: "123456789"
    AcceptFriendRequest:
      type: object
      properties:
        requestId:
          type: string
          description: Unique identifier for the user to add as a friend
          example: "123456789"
    DenyFriendRequest:
      type: object
      properties:
        requestId:
          type: string
          description: Unique identifier for the user to add as a friend
          example: "123456789"
    CommonSuccessResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
    CommonErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
    UpdateProfileRequest:
      type: object
      properties:
        displayName:
          type: string
          description: Full name of the user
          example: "John Doe"
        address:
          type: object
          description: User's address details
          properties:
            country:
              type: string
              description: Country where the user resides
              example: "Vietnam"
            province:
              type: string
              description: Province where the user resides
              example: "Hanoi"
            city:
              type: string
              description: City where the user resides
              example: "Hanoi"
            district:
              type: string
              description: District where the user resides
              example: "Cau Giay"
            ward:
              type: string
              description: Ward where the user resides
              example: "Nghia Tan"
    500InternalError:
      type: object
      description: Internal Server Error Occured
      properties:
        errorCode:
          type: string
          description: internalServerErrorOccured
          example: ERROR1
        message:
          type: string
          description: Internal Server Error has Occured
          example: Internal Server Error has Occured
    FriendDTO:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: "123456789"
        username:
          type: string
          description: Username chosen by the user
          example: "john_doe"
        displayName:
          type: string
          description: Full name of the user
          example: "John Doe"
        avatarUrl:
          type: string
          description: URL to the user's avatar image
          example: "https://example.com/avatar.jpg"
        email:
          type: string
          description: Email address of the user
          example: "johndoe@example.com"
